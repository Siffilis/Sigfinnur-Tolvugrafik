/////////////////////////////////////////////////////////////////
//    S�nid�mi � T�lvugraf�k
//     S�nir notkun � lyklabor�satbur�um til a� hreyfa spa�a
//
//    Hj�lmt�r Hafsteinsson, jan�ar 2022
/////////////////////////////////////////////////////////////////
var canvas;
var gl;
var LeidUpp = false;
var haegri = false;
var xmove = 0;
var ymove = 0;
var groundlevel = -0.90;
var keysDisabled = false;
var spegla = true;

var locColor;
var vPosition;
var bufferId;
var bufferIdPeningur;
var pHnit = vec2(0.0,0.0);

var colorMario = vec4(0.0, 0.0, 1.0, 1.0);
var colorPeningur = vec4(0.0, 1.0, 1.0, 1.0);

var vertices = [
    //Mario
    vec2(  -0.1, -0.90 ), //nedri
    vec2( -0.1, -0.70 ), //efri
    vec2(  0.1, -0.80 ), //midja

    //peningur
    vec2( -0.1, -0.60), //v. horn nidri
    vec2( -0.15, -0.60), //v. horn uppi
    vec2( -0.15, -0.55), //h. horn uppi
    vec2( -0.1, -0.55), //h. horn nidri

    //strik
    vec2(-0.9, 0.9),
    vec2(-0.88, 0.9),
    vec2(-0.88, 0.85),
    vec2(-0.9, 0.85)
];

function disableKeys(){
    keysDisabled = true;
}

function enableKeys(){
    keysDisabled = false;
}

function isKeysDisabled(){
    return keysDisabled;
}

function nyrPeningur(){
    pHnit = vec2(Math.random()*1.8-0.9, 0.0);
}

function collision(){
    var midjaXmario = (vertices[0][0] + vertices[1][0] + vertices[2][0])/3.0;
    var midjaYmario = (vertices[0][1] + vertices[1][1] + vertices[2][1])/3.0;
    var midjaMario = vec2(midjaXmario, midjaYmario);

    var midjaXp = (vertices[3][0]+vertices[4][0]+vertices[5][0]+vertices[6][0])/4.0;
    var midjaYp = (vertices[3][1]+vertices[4][1]+vertices[5][1]+vertices[6][1])/4.0;
    var midjaPeningur = vec2(midjaXp+pHnit[0], midjaYp+pHnit[1]);

    if((midjaMario[0] >= midjaPeningur[0]-0.2) && (midjaMario[0] <= midjaPeningur[0] +0.2) && (midjaMario[1] >= midjaPeningur[1]-0.2) && (midjaMario[1] <= midjaPeningur[1] +0.2)){
        nyrPeningur();
    }
}

window.onload = function init() {

    canvas = document.getElementById( "gl-canvas" );
    
    gl = WebGLUtils.setupWebGL( canvas );
    if ( !gl ) { alert( "WebGL isn't available" ); }
    
    gl.viewport( 0, 0, canvas.width, canvas.height );
    gl.clearColor( 0.8, 0.8, 0.8, 1.0 );

    //
    //  Load shaders and initialize attribute buffers
    //
    var program = initShaders( gl, "vertex-shader", "fragment-shader" );
    gl.useProgram( program );

    /*
    var peningur = [
        vec2( -0.1, -0.90), //v. horn nidri
        vec2( -0.1, -0.85), //h. horn nidri
        vec2( -0.15, -0.90), //v. horn uppi
        vec2( -0.15, -0.85) //h. horn uppi
    ];
    */
    
    // Load the data into the GPU

    /*
    var bufferId = gl.createBuffer();
    gl.bindBuffer( gl.ARRAY_BUFFER, bufferId );
    gl.bufferData( gl.ARRAY_BUFFER, flatten(vertices), gl.DYNAMIC_DRAW );

    var bufferIdPeningur = gl.createBuffer();
    gl.bindBuffer( gl.ARRAY_BUFFER, bufferIdPeningur);
    gl.bufferData( gl.ARRAY_BUFFER, flatten(peningur), gl.DYNAMIC_DRAW );


    // Associate out shader variables with our data buffer
    var locPosition = gl.getAttribLocation( program, "vPosition" );
    gl.enableVertexAttribArray( locPosition );
    */

    bufferId = gl.createBuffer();
    gl.bindBuffer( gl.ARRAY_BUFFER, bufferId );
    gl.bufferData( gl.ARRAY_BUFFER, flatten(vertices), gl.DYNAMIC_DRAW );

    // Associate out shader variables with our data buffer
    vPosition = gl.getAttribLocation( program, "vPosition" );
    gl.vertexAttribPointer( vPosition, 2, gl.FLOAT, false, 0, 0 );
    gl.enableVertexAttribArray( vPosition );

    locColor = gl.getUniformLocation( program, "fColor");
    locCoin = gl.getUniformLocation( program, "pPosition");
    isCoin = gl.getUniformLocation( program, "isCoin");

    // Event listener for keyboard
    window.addEventListener("keydown", function(e){
        LeidUpp = true;
        switch( e.keyCode ) {
            case 37:	// vinstri �r
                haegri = false;
                if(spegla == true){
                    vertices[2][0] -= 0.4;
                    spegla = false;
                }
                xmove = -0.04;
                break;
            case 39:	// h�gri �r
                xmove = 0.04;
                if(spegla == false){
                    vertices[2][0] += 0.4;
                    spegla = true;
                }
                haegri = true;
                break;
            case 38:
                var myInterval = setInterval(
                    function() {
                        if(!(vertices[0][1] < -0.40)){
                            LeidUpp = false;
                        }
                        if(LeidUpp){
                            if(haegri){
                                ymove = 0.08;
                                xmove = 0.04;
                            }
                            else{
                                ymove = 0.08;
                                xmove = -0.04;
                            }
                        }
                        else{
                            if(haegri){
                                ymove = -0.08;
                                xmove = 0.04;
                            }
                            else{
                                ymove = -0.08;
                                xmove = -0.04;
                            }
                        }
                        for(i=0; i<3; i++) {
                            vertices[i][0] += xmove;
                            vertices[i][1] += ymove;
                        }
                        if(vertices[0][1] == groundlevel){
                            clearInterval(myInterval);
                            //enableKeys();
                        }
                        gl.bufferSubData(gl.ARRAY_BUFFER, 0, flatten(vertices));
                        render();
                    }
                    , 100);
                break;
            default:
                ymove = 0.0;
                xmove = 0.0;
            }
        for(i=0; i<3; i++) {
            vertices[i][0] += xmove;
        }
        //}

        gl.bufferSubData(gl.ARRAY_BUFFER, 0, flatten(vertices));
    } );
    //locColor = gl.getUniformLocation(program, "rcolor");

    if(vertices[0][0]< -1.0){
        for(i=0; i<3; i++) {
            vertices[i][0] += xmove;
        }
    }
    nyrPeningur();
    render();
}


function render() {
    collision();
    
    gl.clear( gl.COLOR_BUFFER_BIT );

    gl.bindBuffer( gl.ARRAY_BUFFER, bufferId );
    gl.vertexAttribPointer(vPosition, 2, gl.FLOAT, false, 0, 0);
    gl.bufferData( gl.ARRAY_BUFFER, flatten(vertices), gl.DYNAMIC_DRAW );

    gl.uniform4fv( locColor, vec4(0.0, 0.0, 1.0, 1.0));
    gl.drawArrays( gl.TRIANGLES, 0, 3 );

    gl.uniform4fv( locColor, vec4(1.0, 1.0, 0.0, 1.0));
    gl.uniform2fv( locCoin, pHnit);
    gl.uniform1i( isCoin, true);
    gl.drawArrays( gl.TRIANGLE_FAN, 3, 4);
    gl.uniform1i( isCoin, false);

    /*
    //Teikna mario
    gl.bindBuffer( gl.ARRAY_BUFFER, bufferId );
    gl.vertexAttribPointer( locPosition, 2, gl.FLOAT, false, 0, 0 );
    gl.uniform4fv( locColor, flatten(colorMario));
    gl.drawArrays( gl.TRIANGLES, 0, 3 );

    //Teikna gullpening
    gl.bindBuffer( gl.ARRAY_BUFFER, bufferIdPeningur );
    gl.vertexAttribPointer( locPosition, 2, gl.FLOAT, false, 0, 0 );
    gl.uniform4fv( locColor, flatten(colorPeningur));
    gl.drawArrays( gl.TRIANGLE_FAN, 0, 4);
    */

    window.requestAnimFrame(render);
}
